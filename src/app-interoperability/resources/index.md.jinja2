# Application Package Definition

This section addresses how an application is packaged by the “Application Developer” who has implemented the application and aims to provide it to Margo-conformant systems. An application aggregates one or more [OCI Containers](https://github.com/opencontainers). The **application package definition** is made available in an [application registry](./workload-orch-to-app-reg-interaction.md), while the referenced OCI artifacts are stored in a remote or [local registry](local-registries.md).  

The application package comprises:

- The **application description** file `margo.yaml`, which contains information about the application's marketing details (e.g., description, icon, release notes, license file, etc.), resource requirements, required input parameters, and application's supported deployment configurations (e.g,  Helm charts, docker-compose package).
- The **application resources** which can be used to display additional information about the application in an application catalog or marketplace based on the application's defined metadata (e.g., description, icon, release notes, license file, etc.).

    > **Note**  
    > Application Marketplaces are out of scope for Margo. The exact requirements of the Marketing Material shall be defined by the Application Marketplace beyond outlined mandatory content.

The application package's deployment configuration SHALL be defined as Helm Charts AND/OR a Docker Compose packages.

- To target devices running Kubernetes applications must be packaged as helm charts using [Helm V3](https://helm.sh/).
- To target devices deploying applications using Docker Compose files you must create a tarball file containing the application's docker-compose.yml file and any additional artifacts referenced by the docker compose file (e.g., configuration files, environment variable files, etc.). It is highly recommend to digitally sign this package. When digitally signing the package PGP MUST be used.

> **Investigation Needed**: We plan to do a security review of this package definition later.
> During this review we will revisit the way the docker compose tarball file should be signed.
> We will also discuss how we should handle secure container registries that require a username and password.
>
> **Investigation Needed**: We need to determine what impact, if any, using 3rd party helm charts has on being Margo compliant.
>
> **Investigation Needed**: Missing in the current specification are ways to define the compatibility information (resources required to run, application dependencies) as well as required infrastructure  services  such as storage, message queues/bus, reverse proxy, or authentication/authorization/accounting.

If either one cannot be implemented it MAY be omitted but Margo RECOMMENDS defining components for both Helm Chart **AND** Docker Compose packages to strengthen interoperability and applicability.

> **Note**
> A device running the application will only install the application using either Docker Compose files or Helm Charts but not both.

## Application Package Structure

The application package has the following folder structure:

```yaml
/                            # REQUIRED top-level directory 
└── margo.yaml               # REQUIRED application description file in YAML Format 
└── resources                # OPTIONAL folder with application catalog resources e.g., icon, license file, release notes 
```


## Application Description

The `margo.yaml` file is the application description. The purpose of this file is to present the application on an application catalog or marketplace from where an end user selects the application to hand it over to the Workload Orchestration Software, which configures it and makes it available for installation on the edge device (see Section [Workload Management Interface](../orchestration/workload/workload-management-interface-breakdown.md)).

### Application Description Example

A simple hello-world example of an `margo.yaml` file is shown below:

```yaml
{% include 'examples/valid/ApplicationDescription-001.yaml' %}
```

An example of a `margo.yaml` file using multiple helm charts and a docker-compose file package is shown below.

```yaml
{% include 'examples/valid/ApplicationDescription-002.yaml' %}
```

### Top-level Attributes

{% macro abort(error) %}
    {{ None['[ERROR] ' ~ error][0] }}
{% endmacro %}

{%- macro format_range(slot) -%}
    {%- if slot.multivalued -%}
        {%- if slot.inlined -%}
            {%- if slot.inlined_as_list -%}
                []{{ slot.range }}
            {%- else -%}
                {%- if slot.name == "properties" -%}
                    map[string][string]
                {%- else -%}
                    map[string][{{ slot.range }}]
                {%- endif -%}
            {%- endif -%}
        {%- else -%}
            []string
        {%- endif -%}
    {%- else -%}
        {{ slot.range }}
    {%- endif -%}
{%- endmacro -%}

| Attribute | Type | Required? | Description |
| --- | --- | --- | --- |
{% for slot in schemaview.class_slots("ApplicationDescription")|sort(attribute='rank') -%}
| {{ slot }} | {{ format_range(schemaview.get_slot(slot)) }} | {% if schemaview.get_slot(slot).required == True %} Y {% else %} N {% endif %} | {{ schemaview.get_slot(slot).description }}|
{% endfor -%}

{% for c in gen.all_class_objects()|sort(attribute='rank') %}
{%- if c.name != "ApplicationDescription" and not c.name.startswith("ComponentProperties") and not c.name.startswith("Helm") and not c.name.startswith("DockerCompose") %}

{# if c is a subclass of any: #}

{%- if c.is_a -%} 
* #### {{ c.name }} Attributes  <br>
(Subclass of {{ c.is_a }})  <br>
{%- else -%}
### {{ c.name }} Attributes  <br>
{%- endif %} 

{%- if c.description -%} 
<br>
{{ c.description }} <br>
{%- endif %} 

| Attribute | Type | Required? | Description |
| --- | --- | --- | --- |
{% for slot in gen.get_direct_slots(c)|sort(attribute='rank') -%}
{%- if slot.name != "value" -%}
| {{ slot.name }} | {{ format_range(slot) }} | {% if slot.required == True %} Y {% else %} N {% endif %} | {{ slot.description }}|
{%- else -%}
| {{ slot.name }} | <*see description*> | {% if slot.required == True %} Y {% else %} N {% endif %} | {{ slot.description }}|
{%- endif %}
{% endfor %}
{%- endif %}

{%- if c.name.startswith("ComponentProperties") %}

### ComponentProperties Attributes
The expected properties for the suppported deployment types are indicated below.

- Properties for `helm.v3` components

| Attribute      | Type  | Required?     | Description    |
| --- | --- | --- | --- |
| repository     | string |  Y  | The URL indicating the helm chart's location.|
| revision      | string |  Y  | The helm chart's full version.|
| wait | bool  | N  | If `True`, indicates the device MUST wait until the helm chart has finished installing before installing the next helm chart. The default is `True`. The Workload Orchestration Agent MUST support `True` and MAY support `False`. Only applies if multiple `helm.v3` components are provided.|
| timeout | string      | N   | The time to wait for the component's installation to complete. If the installation does not completed before the timeout occurs the installation process fails. The format is "##m##s" indicating the total number of minutes and seconds to wait. |  

- Properties for `docker-compose` components

> **Investigation Needed**: We need to have more discussion about how docker-compose should be handled and what is required here.
> We also need to determine if there is a version of docker-compose that needs to be specified. The docker compose schema [version has been
> deprecated](https://github.com/compose-spec/compose-spec/blob/master/spec.md#version-and-name-top-level-elements) so it's not clear what we would even use for this if we wanted to.

| Attribute      | Type  | Required?     | Description    |
| --- | --- | --- | --- |
| packageLocation  | string |  Y  | The URL indicating the Docker Compose package's location. |
| keyLocation    | string | N  | The public key used to validated the digitally signed package. It is highly recommend to digitally sign the package. When signing the package PGP MUST be used.|
| wait | bool  | N  | If `True`, indicates the device MUST wait until the Docker Compose file has finished starting up before starting the next Docker Compose file. The default is `True`. The Workload Orchestration Agent MUST support `True` and MAY support `False`. Only applies if multiple `docker-compose` components are provided.|
| timeout | string      | N   | The time to wait for the component's installation to complete. If the installation does not completed before the timeout occurs the installation process fails. The format is "##m##s" indicating the total number of minutes and seconds to wait.|

## Defining configurable application parameters

To allow customizable configuration values when installing an application, the `margo.yaml` defines the parameters and configuration sections giving the application vendor control over what can be configured when installing, or updating, an application. The [configuration](#configuration-attributes) section describes how the workload orchestration software vendor must display parameters to the user to allow them to specify the values. The [schema](#schema-attributes) section describes how the workload orchestration software vendor must validate the values provided by the user before the application is installed or updated.

> **Note:** At this point the specification only deals with parameter values provided by the user as part of installing, or updating, the application. We anticipate parameter values to come from other sources, such as the device, in the future and not only from the user.

{%- endif %}
{%- endfor %}
