# Application Package Definition

This section defines the application package provided by an “Application Developer” who has implemented the application and aims to provide it to Margo-conformant systems. The application package comprises:

- The **application description**: a YAML document (type = `ApplicationDescription`), which is stored in a file (e.g., `margo.yaml`) and contains information about the application's [metadata](#metadata-attributes) (e.g., description, icon, release notes, license file, etc.), application supported [deployment configurations](#deploymentprofile-attributes) (e.g,  Helm charts, Docker Compose package), and [configurable application parameters](#defining-configurable-application-parameters).
- The **resources**, which are additional information about the application (e.g., manual, icon, release notes, license file, etc.) that can be provided in an application catalog or marketplace.

The application package has the following file/folder structure:

```yaml
/                           # REQUIRED top-level directory 
└── application description # REQUIRED a YAML document of type ApplicationDescription stored in a file  (e.g., 'margo.yaml')
└── resources               # OPTIONAL folder with application resources (e.g., icon, license file, release notes) that can be displayed in an application catalog
```

An application aggregates one or more [OCI Containers](https://github.com/opencontainers). While the application package is made available in an [application registry](./workload-orch-to-app-reg-interaction.md), the referenced OCI artifacts are stored in a remote or [local registry](../local-registries). 

The following diagram shows the typical workflow for the usage of the application description:
```mermaid
---
config:
    layout: elk


---
sequenceDiagram
    actor EndUser as End User
    participant frontend as Workload Fleet Manager Frontend
    participant fleetmgr as Workload Fleet Manager
    participant registry as Application Registry
        
    autonumber
    
    EndUser->>frontend: Visits Application Catalog
    frontend->>fleetmgr: Get list of available workloads (=Apps)
    
    alt
      fleetmgr ->> registry: Get 'application description' from each known application registry.
    else
      fleetmgr ->> fleetmgr: Get cached 'application description' for all cached applications.
    end
    fleetmgr->>frontend: Return list of 'application description's
    
    frontend ->> frontend: Read all 'application description's -> 'metadata' element
    frontend ->> EndUser: Show UI with list of applications
    EndUser->>frontend: Select workload (=App) to install
    frontend ->> frontend: Read 'application description' -> 'configuration' element
    frontend -->> EndUser: Show UI to fill App configuration
    EndUser ->> frontend: Answer configurable questions to be applied to workload(s)
    frontend ->> fleetmgr: Create 'ApplicationDeployment' definition
    
```

1. An end user visits an application catalog (or marketplace) of the Workload Fleet Manager Frontend.
2. This frontend requests all workloads from the Workload Fleet Manager.
3. *Either*: the Workload Fleet Manager requests all application descriptions from each known  Application Registry.
4. *Or*: the Workload Fleet Manager maintains a cache of application descriptions and services the request from there.
5. The Workload Fleet Manager returns the retrieved documents of application descriptions to the frontend.
6. The frontend parses the [metadata](#metadata-attributes) element of all received application description documents.
7. The frontend presents the parsed metadata in a UI to the end user.
8. The end user selects the workload to be installed.
9. The frontend parses the [configuration](#dconfiguration-attributes) element of the selected application description.
10. The frontend presents the parsed configuration to the user.
11. The end user fills out the [configurable application parameters](#defining-configurable-application-parameters) to be applied to the workload.
12. The frontend creates an `ApplicationDeployment` definition (from the `ApplicationDescription` and the filled out parameters) and sends it to the Workload Fleet Manager, which executes it as the [desired state](../../margo-api-reference/workload-api/desired-state-api/desired-state/).

> **Note**  
> Application catalogs or marketplaces are out of scope for Margo. The exact requirements of the marketing material shall be defined by the application marketplace beyond outlined mandatory content.

The [deployment profiles](#deploymentprofile-attributes) specified in the application description SHALL be defined as Helm Charts AND/OR Docker Compose components.

- To target devices, which run Kubernetes, applications must be packaged as Helm charts using [Helm V3](https://helm.sh/).
- To target devices, which deploy applications using Docker Compose, applications must be packaged as a tarball file containing the *docker-compose.yml* file and any additional artifacts referenced by the docker compose file (e.g., configuration files, environment variable files, etc.). It is highly recommend to digitally sign this package. When digitally signing the package PGP MUST be used.

> **Investigation Needed**: We plan to do a security review of this package definition later.
> During this review we will revisit the way the Docker Compose tarball file should be signed.
> We will also discuss how we should handle secure container registries that require a username and password.
>
> **Investigation Needed**: We need to determine what impact, if any, using 3rd party helm charts has on being Margo compliant.
>
> **Investigation Needed**: Missing in the current specification are ways to define the compatibility information (resources required to run, application dependencies) as well as required infrastructure  services  such as storage, message queues/bus, reverse proxy, or authentication/authorization/accounting.

If either one cannot be implemented it MAY be omitted but Margo RECOMMENDS defining [deployment profiles](#deploymentprofile-attributes) as both Helm chart **AND** Docker Compose components to strengthen interoperability and applicability.

> **Note**
> A device running the application will only install the application using either Docker Compose files or Helm Charts but not both.


## Application Description

The application description defined as a YAML document (type = `ApplicationDescription`) has the purpose of presenting the application, e.g., on an application catalog or marketplace from where an end user selects an application to be installed. Therefore the application is configured by the end user according to the [configuration parameters](#defining-configurable-application-parameters) to create an `ApplicationDeployment` definition, which will then be executed as the [desired state](../../margo-api-reference/workload-api/desired-state-api/desired-state/).

### Application Description Example

A simple hello-world example of an `ApplicationDescription` is shown below:

```yaml
{% include 'examples/valid/ApplicationDescription-001.yaml' %}
```

An example of an `ApplicationDescription` defining [deployment profiles](#deploymentprofile-attributes) for both cases, Helm chart as well as Docker Compose, is shown below.

```yaml
{% include 'examples/valid/ApplicationDescription-002.yaml' %}
```

### Top-level Attributes

{% macro abort(error) %}
    {{ None['[ERROR] ' ~ error][0] }}
{% endmacro %}

{%- macro format_range(slot) -%}
    {%- if slot.multivalued -%}
        {%- if slot.inlined -%}
            {%- if slot.inlined_as_list -%}
                []{{ slot.range }}
            {%- else -%}
                {%- if slot.name == "properties" -%}
                    map[string][string]
                {%- else -%}
                    map[string][{{ slot.range }}]
                {%- endif -%}
            {%- endif -%}
        {%- else -%}
            []string
        {%- endif -%}
    {%- else -%}
        {{ slot.range }}
    {%- endif -%}
{%- endmacro -%}

| Attribute | Type | Required? | Description |
| --- | --- | --- | --- |
{% for slot in schemaview.class_slots("ApplicationDescription")|sort(attribute='rank') -%}
| {{ slot }} | {{ format_range(schemaview.get_slot(slot)) }} | {% if schemaview.get_slot(slot).required == True %} Y {% else %} N {% endif %} | {{ schemaview.get_slot(slot).description }}|
{% endfor -%}

{% for c in gen.all_class_objects()|sort(attribute='rank') %}
{%- if c.name != "ApplicationDescription" and not c.name.startswith("ComponentProperties") and not c.name.startswith("Helm") and not c.name.startswith("DockerCompose") %}

{# if c is a subclass of any: #}

{%- if c.is_a -%} 
* #### {{ c.name }} Attributes  <br>
(Subclass of {{ c.is_a }})  <br>
{%- else -%}
### {{ c.name }} Attributes  <br>
{%- endif %} 

{%- if c.description -%} 
<br>
{{ c.description }} <br>
{%- endif %} 

| Attribute | Type | Required? | Description |
| --- | --- | --- | --- |
{% for slot in gen.get_direct_slots(c)|sort(attribute='rank') -%}
{%- if slot.name != "value" -%}
| {{ slot.name }} | {{ format_range(slot) }} | {% if slot.required == True %} Y {% else %} N {% endif %} | {{ slot.description }}|
{%- else -%}
| {{ slot.name }} | <*see description*> | {% if slot.required == True %} Y {% else %} N {% endif %} | {{ slot.description }}|
{%- endif %}
{% endfor %}
{%- endif %}

{%- if c.name.startswith("ComponentProperties") %}

### ComponentProperties Attributes
The expected properties for the suppported deployment types are indicated below.

- Properties for `helm.v3` components

| Attribute      | Type  | Required?     | Description    |
| --- | --- | --- | --- |
| repository     | string |  Y  | The URL indicating the helm chart's location.|
| revision      | string |  Y  | The helm chart's full version.|
| wait | bool  | N  | If `True`, indicates the device MUST wait until the helm chart has finished installing before installing the next helm chart. The default is `True`. The Workload Orchestration Agent MUST support `True` and MAY support `False`. Only applies if multiple `helm.v3` components are provided.|
| timeout | string      | N   | The time to wait for the component's installation to complete. If the installation does not completed before the timeout occurs the installation process fails. The format is "##m##s" indicating the total number of minutes and seconds to wait. |  

- Properties for `docker-compose` components

> **Investigation Needed**: We need to have more discussion about how docker-compose should be handled and what is required here.
> We also need to determine if there is a version of docker-compose that needs to be specified. The docker compose schema [version has been
> deprecated](https://github.com/compose-spec/compose-spec/blob/master/spec.md#version-and-name-top-level-elements) so it's not clear what we would even use for this if we wanted to.

| Attribute      | Type  | Required?     | Description    |
| --- | --- | --- | --- |
| packageLocation  | string |  Y  | The URL indicating the Docker Compose package's location. |
| keyLocation    | string | N  | The public key used to validated the digitally signed package. It is highly recommend to digitally sign the package. When signing the package PGP MUST be used.|
| wait | bool  | N  | If `True`, indicates the device MUST wait until the Docker Compose file has finished starting up before starting the next Docker Compose file. The default is `True`. The Workload Orchestration Agent MUST support `True` and MAY support `False`. Only applies if multiple `docker-compose` components are provided.|
| timeout | string      | N   | The time to wait for the component's installation to complete. If the installation does not completed before the timeout occurs the installation process fails. The format is "##m##s" indicating the total number of minutes and seconds to wait.|

## Defining configurable application parameters

To allow customizable configuration values when installing an application, the *application description*  defines the parameters and configuration sections giving the application vendor control over what can be configured when installing, or updating, an application. The [configuration](#configuration-attributes) section describes how the workload orchestration software vendor must display parameters to the user to allow them to specify the values. The [schema](#schema-attributes) section describes how the workload orchestration software vendor must validate the values provided by the user before the application is installed or updated.

> **Note:** At this point the specification only deals with parameter values provided by the user as part of installing, or updating, the application. We anticipate parameter values to come from other sources, such as the device, in the future and not only from the user.

{%- endif %}
{%- endfor %}
